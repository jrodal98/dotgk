use anyhow::Result;

use crate::cache::cache::Cache;
use crate::cache::cache::CacheEntry;
use crate::cache::generators::CacheGenerator;

/// Python cache generator
pub struct PythonCacheGenerator;

impl CacheGenerator for PythonCacheGenerator {
    fn name(&self) -> &'static str {
        "python"
    }

    fn file_extension(&self) -> &'static str {
        "py"
    }

    fn generate_content(&self, cache: &Cache) -> Result<String> {
        let mut content = String::new();
        content.push_str("# Auto-generated by dotgk sync\n");
        content.push_str("# Do not edit manually\n\n");
        content.push_str("\"\"\"Dotgk cache for Python.\"\"\"\n\n");

        // Sort entries by name for consistent output
        let mut entries: Vec<(&String, &CacheEntry)> = cache.cache.iter().collect();
        entries.sort_by(|a, b| a.0.cmp(b.0));

        // Generate dictionary
        content.push_str("DOTGK = {\n");
        for (name, entry) in entries {
            let value = if entry.value { "True" } else { "False" };
            content.push_str(&format!("    \"{}\": {},\n", name, value));
        }
        content.push_str("}\n\n");

        // Add helper function
        content.push_str("def check(name: str) -> bool:\n");
        content.push_str("    \"\"\"Check if a gatekeeper is enabled.\"\"\"\n");
        content.push_str("    return DOTGK.get(name, False)\n");

        Ok(content)
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::cache::generators::test_utils::create_test_cache;

    #[test]
    fn test_python_generator() -> Result<()> {
        let generator = PythonCacheGenerator;
        let cache = create_test_cache();

        let content = generator.generate_content(&cache)?;

        assert!(content.contains("# Auto-generated by dotgk sync"));
        assert!(content.contains("\"\"\"Dotgk cache for Python.\"\"\""));
        assert!(content.contains("DOTGK = {"));
        assert!(content.contains("    \"another_gk\": False,"));
        assert!(content.contains("    \"test-gk\": True,"));
        assert!(content.contains("def check(name: str) -> bool:"));

        Ok(())
    }
}
